WSbaseFolder=/Users/lenin/Dropbox/NOW/VAST2017/
inputDataFileToCreateGBADGraph_OR_Folder=LekagulSensorData_dummy.csv
inputDataFileToCreateGBADGraph_OR_Folder.remark=either a file name (or) folder (e.g., "minutesplit/")
delimiter_4_inputDataFileToCreateGBADGraph=,
outFile=LekagulSensorData_dummy_OUTPUT.g
outFile.remark=above file NOT used if input is a FOLDER.
s1.graphtopology=1->(3)2,[this]->(3)2,[this]->(2)4{[ID.2]#[DUMMY.edgeLabel]#[OTHER.edgeLabel]#[has].1**[has].2#[END.edgeLabel]}
s1.graphtopology.remark=(1) see some example in "s1.graphtopology.EXAMPLE<N>.remark" below. (2)
is_header_present=true
isSOPprint=true
isDebugMore=false
startLineNo=-1
startLineNo.remarks=If you dont want to run from start of a line in a file, then set it as -1.
endLineNo=-1
endLineNo.remark=If you dont want to run from end of a line in a file, then set it as -1.
is_create_each_inFile_as_an_XP_in_graph=falses
is_create_each_inFile_as_an_XP_in_graph.remark=if true, then one XP for one given file. If what is given in "inputDataFileToCreateGBADGraph_OR_Folder" is a file, then set it as "false"
is_skip_d3js_fileCreation=true
TEMP1.remark=
WSbaseFolder.remark=Work (Staging) Folder
s1.graphtopology.EXAMPLE1=[Home]->(31)[Grid],[Gen]->(30)[Grid],[Grid]->(3)[use],[use]->(4)[air1],[use]->(5)[air2],[use]->(6)[air3],[use]->(7)[airwindowunit1],[use]->(8)[aquarium1],[use]->(9)[bathroom1],[use]->(10)[bathroom2],[use]->(11)[bedroom1],[use]->(12)[bedroom2],[use]->(13)[bedroom3],[use]->(14)[bedroom4],[use]->(15)[bedroom5],[use]->(16)[car1],[use]->(17)[clotheswasher1],[use]->(18)[clotheswasher_dryg1],[use]->(19)[diningroom1],[use]->(20)[diningroom2],[use]->(21)[dishwasher1],[use]->(22)[disposal1],[use]->(23)[drye1],[use]->(24)[dryg1],[use]->(25)[freezer1],[use]->(26)[furnace1],[use]->(27)[furnace2],[use]->(28)[garage1],[use]->(29)[garage2],[use]->(32)[heater1],[use]->(33)[housefan1],[use]->(34)[icemaker1],[use]->(35)[jacuzzi1],[use]->(36)[jacuzzi1],[use]->(37)[kitchen1],[use]->(38)[kitchen2],[use]->(39)[kitchenapp1],[use]->(40)[kitchenapp2],[use]->(41)[lights_plugs1],[use]->(42)[lights_plugs2],[use]->(43)[lights_plugs3],[use]->(44)[lights_plugs4],[use]->(45)[lights_plugs5],[use]->(46)[lights_plugs6],[use]->(47)[livingroom1],[use]->(48)[livingroom2],[use]->(49)[microwave1],[use]->(50)[office1],[use]->(51)[outsidelights_plugs1],[use]->(52)[outsidelights_plugs2],[use]->(53)[oven1],[use]->(54)[oven2],[use]->(55)[pool1],[use]->(56)[pool2],[use]->(57)[poollight1],[use]->(58)[poolpump1],[use]->(59)[pump1],[use]->(60)[range1],[use]->(61)[refrigerator1],[use]->(62)[refrigerator2],[use]->(63)[security1],[use]->(64)[shed1],[use]->(65)[sprinkler1],[use]->(66)[utilityroom1],[use]->(67)[venthood1],[use]->(68)[waterheater1]
s1.graphtopology.EXAMPLE2=[root]->(has)[ID],[ID]->(has)[source],[source]->(has)[user],[user]->(has)2,[source]->(has)[sdomain],[sdomain]->(has)3,[ID]->(has)[destin],[destin]->(has)[duser],[duser]->(has)4,[root]->(has)[authtype],[authtype]->(has)8,[root]->(has)[authorient],[authorient]->(has)10,[root]->(has)[process],[process]->(has)16,[authorient]->(has)2,6->(8)7
s1.graphtopology.EXAMPLE3=1->(3)2,3->(2)(4)
s1.graphtopology.EXAMPLE31=1->(3)2,3->(2)4
s1.graphtopology.EXAMPLE4=1->(3)2,[this]->(3)2,[this]->(2)4{[ID.2]#[START.edgeLabel]#[OTHER.edgeLabel]#[has].1**[has].2#[END.edgeLabel]}
s1.graphtopology.EXAMPLE4.REMARK={[ID.1]#[START.edgeLabel]#[OTHER.edgeLabel]#[has].1**[has].2#[END.edgeLabel]}
s1.graphtopology.EXAMPLE4.REMARK.CONTINUE=-> means (unique/primary) ID is the column 1. Inside [has], we can have [1] which means column one values.
CONT=and it create a sequence of node with values from column "4", and starting edge will be one appearing after . inside  "[START.edgelabel]"
CONT=and ending edge will be one appearing after . from "[END.edgeLabel]".  Additionally node value from column 4 will have another node with value from column 1.
CONT=Same between node of value from column 4 and 2. Between this nodes having value from 4 and 1, we will have an edge "[has]".This sequence of edges created will be in
CONT=the same order it appears in the file.
s1.graphtopology.EXAMPLE5=1->(3)2,[this]->(3)2,[this]->(2)4{[ID.2]#[START.edgeLabel]#[OTHER.edgeLabel]#[has].1#[END.edgeLabel]}
s1.graphtopology.EXAMPLE5.REMARK=Similar to example 4, but has only one inned edge-dest2 pair (i.e., [has].1). This case is tested with VAST2017MC1 and it works.
s1.graphtopology.EXAMPLE6=1->(3)2,[this]->(3)2,[this]->(2)4{[ID.2]#[DUMMY.edgeLabel]#[OTHER.edgeLabel]#[has].1**[has].2#[END.edgeLabel]}
s1.graphtopology.EXAMPLE6.REMARK=When there is DUMMY, then destination from "[this]->(2)4", which is 4 will be used (fallback). 